<!DOCTYPE html>
<html>
  {% include "head.njk" %}

  <body>
    <link rel="stylesheet" href="/vendor/reveal.js/reset.css">
    <link rel="stylesheet" href="/vendor/reveal.js/reveal.css">
    <link rel="stylesheet" href="/vendor/reveal.js/plugin/pointer/pointer.css">
    <link rel="stylesheet" href="/css/presentation.css" id="theme">

    <div id="hidden" style="display:none;">
      <div id="header">
        <div class="header-right"><div class="header-logo"></div></div>
      </div>
    </div>

    <div class="reveal">
        <div class="slides">
          <section class="title-slide center" data-timing="15">
              {% if logo %}
              <div class="logos">
                <div id="vub-logo"></div>
                <div id="wise-logo"></div>
                <div id="openhps-logo"></div>
              </div>
              {% endif %}
              <h2 id="label-title">
              {% if presentation_title %}
                {{ presentation_title | safe }}
              {% else %}
                {{ title }}
              {% endif %}
              </h2>
              <h3 id="label-subtitle">{{ subtitle }}</h3>
              <h5 class="author">{{ author | safe }}</h5>
              <h5 class="affiliation">{{ affiliation | safe }}</h5>
          </section>
          {{ content | safe }}
        </div>
    </div>

    <script src="/scripts/twoslash.js"></script>
    <script type="module">
      import Reveal from '/vendor/reveal.js/reveal.esm.js';
      import Notes from '/vendor/reveal.js/plugin/notes/notes.esm.js';
      import Pointer from '/vendor/reveal.js/plugin/pointer/pointer.esm.js';

      const options = {
        hash: true,
        margin: .08,
        width: 960,
        height: 700,
        plugins: [ Notes, Pointer ],
        controlsTutorial: true,
        pdfMaxPagesPerSlide: 1,
        slideNumber: true,
        center: false,
        pointer: {
          key: "q",
          color: "red",
          pointerSize: 20,
          alwaysVisible: false,
          tailLength: 10,
        },
        totalTime: 15 * 60
      };

      {% if header_logo %}
      const header = document.querySelector("#header").children;
      document.querySelector('.header-logo').setAttribute("style", `background-image: url({{ header_logo }})`);
      const className = window.location.search.indexOf("print-pdf") > -1 ? ".pdf-page" : ".slides";
      const slides = document.querySelectorAll(`${className} section:not([class^="stack"],[class^="title-slide"])`);
      for (let i = 0 ; i < header.length ; i++) {
        slides.forEach(slide => {
          slide.append(header[i].cloneNode(true));
        });
      }
      {% endif %}

      window.Reveal = Reveal;
      if (window.location.search.indexOf("presenter") > -1) {
        console.log("Starting in presenter mode");
        Reveal.initialize({
          ...options,
          navigationMode: 'linear',
          slideNumber: 'c',
          controls: false,     
          pointer: {
            pointerSize: 25,
            alwaysVisible: true,
          },
        });
        Reveal.on('pdf-ready', () => {
          document.querySelectorAll(`.pdf-page section[data-visibility="uncounted"]`).forEach(e => e.closest('.pdf-page').remove());
        });
        Reveal.on('slidechanged', (event) => {
          if (event.currentSlide.hasAttribute("data-visibility") && !Reveal.isOverview()) {
            const prevIndices = Reveal.getIndices(event.previousSlide);
            const currentIndices = Reveal.getIndices(event.currentSlide);
            if (prevIndices.h < currentIndices.h || (prevIndices.h === currentIndices.h && prevIndices.v < currentIndices.v)) {
              Reveal.next();
            } else if (prevIndices.h > currentIndices.h || (prevIndices.h === currentIndices.h && prevIndices.v > currentIndices.v)) {
              Reveal.prev();
            }
          }
        });
        let lastMovement = 0;
        let idle = false;
        document.addEventListener('mousemove', (event) => {
          lastMovement = Date.now();
          if (idle) {
            document.querySelector('.cursor-dot').classList.remove("inactive");
            idle = false;
          }
        }, false);
        setInterval(() => {
          if (!idle && lastMovement < Date.now() - 3000) {
            idle = true;
            document.querySelector('.cursor-dot').classList.add("inactive");
          }
        }, 2000);
      } else {
        Reveal.initialize(options);
      }
    </script>
  </body>
</html>
