---
layout: presentation.njk
title: "Rapid Prototyping of a Positioning System"
presentation_title: "<span style='font-size: 80%'>Rapid Prototyping of a Positioning System</span>"
subtitle: "Using the OpenHPS Framework"
author: Maxim Van de Wynckel
logo: true
header_logo: /images/misc/openhps-logo.svg
affiliation: Web & Information Systems Engineering Lab</br>Vrije Universiteit Brussel
---
{% decktape title, page %}
<section>
    <section data-markdown data-auto-animate data-timing="20">
        {% markdown %}
            ## Positioning System
            *"A positioning system is a mechanism for determining the position of an object in space."*\
            [<small>*- Wikipedia (2022)*</small>](https://en.wikipedia.org/wiki/Positioning_system)
        {% endmarkdown %}
    </section>
    <section data-markdown data-auto-animate data-timing="20">
    {% markdown %}
        ## Positioning System
        *"A positioning system is a mechanism for determining the position of an **object** in **space**."*\
        [<small>*- Wikipedia (2022)*</small>](https://en.wikipedia.org/wiki/Positioning_system)

        **Object**\
        What are you tracking? A person, an asset or a phone?

        **Space**\
        Outdoor, indoor, on a table or on a game board?
    {% endmarkdown %}
</section>

</section>

<section data-markdown data-auto-animate data-timing="20">
    {% markdown %}
        ## Use Cases
        - Navigation\
            *Navigate a person from point A to point B*
        - Tracking\
            *Asset tracking, customer tracking, tracking items on a table*
        - Location Awareness\
            *Trigger an action whenever a specific person is in a room*
        - Mapping\
            *Geospatial mapping of an environment*
    {% endmarkdown %}
    <aside class="notes">
    
    </aside>
</section>

<section>
    <section data-markdown data-auto-animate data-timing="20">
        {% markdown %}
            ## Technologies
            *Technologies used to obtain sensor data for positioning*
            - Camera (Stereoscopic/Monocular/Omnidirectional)
            - Bluetooth Beacons
            - WLAN Access Points
            - Ultrawideband Beacons
            - LIDAR
            - ...
        {% endmarkdown %}
    </section>
</section>


<section>
    <section data-markdown data-auto-animate data-timing="20">
        {% markdown %}
            ## Algorithms
            *Algorithms used to process sensor data*
            - Lateration
            - Proximity positioning
            - Fingerprinting
            - Computer vision
            - Dead reckoning
            - Sensor fusion
            - ...
        {% endmarkdown %}
    </section>
</section>

<section data-markdown data-auto-animate data-timing="20">
    {% markdown %}
        ## Open Source Solutions
        - AnyPlace *[https://anyplace.cs.ucy.ac.cy/](https://anyplace.cs.ucy.ac.cy/)*
        - FIND *[https://github.com/schollz/find3](https://github.com/schollz/find3)*
        - IndoorLocation *[https://github.com/IndoorLocation](https://github.com/IndoorLocation)*
        - Navigine *[https://github.com/Navigine](https://github.com/Navigine)*
        - RedPin *[http://redpin.org/](http://redpin.org/)*
        - Traccar *[https://github.com/traccar](https://github.com/traccar)*
    {% endmarkdown %}
    <aside class="notes">
    
    </aside>
</section>

<section>
    <section data-markdown data-auto-animate data-timing="20">
        {% markdown %}
            ## What is OpenHPS?
            ### An Open Source Hybrid Positioning System
        {% endmarkdown %}
        <img width="67%" class="shadow" src="../ipin2021/images/openhps-site.png"/>
    </section>
    <section data-markdown data-auto-animate data-timing="40">
        {% markdown %}
            ## What is OpenHPS?
            ### An Open Source Hybrid Positioning System
            - Any technology
            - Any algorithm
            - Various use cases
            - Flexibile processing and output
                - Accuracy over battery consumption, reliability, ...
            - Aimed towards developers and researchers
        {% endmarkdown %}
        <aside class="notes">
        With OpenHPS we aim to offer a framework for developers and researchers that
        can support a variety of positioning technologies, algorithms and uses cases that are not just
        limited to indoor positioning. We also aim to offer a lot of flexibility in the outcome of the position,
        weither it is a developer wishing to offer the most accurate position, power optimized solution or
        simply a reliable system that can rougly (but reliably) indicate weither or not you are in a specific room.
        </aside>
    </section>
    <section data-markdown data-auto-animate data-timing="25">
        <h2 data-id="title-processnetworkdesign">Process Network Design</h2>
        <img width="90%" src="../ipin2021/images/architecture.svg"/>
        <aside class="notes">
        When creating a positioning system, you obtain sensor data from multiple different sensors. You process the data until at some stage in your processing
        you merge the sensor data to obtain a position that you can show to your user.
        </aside>
    </section>
    <section data-markdown data-auto-animate data-timing="30">
        <h2 data-id="title-processnetworkdesign">Process Network Design ...</h2>
        <img height="30%" src="../ipin2021/images/architecture.svg"/>
        <img height="45%" data-id="architecture-graph" src="../ipin2021/images/architecture2.svg"/>
        <aside class="notes">
        OpenHPS focuses on this method of developing a positioning system by allowing the creation of a process network with graph topology. 
        We identify source nodes that provide data, processing nodes that process this data and finally sink nodes that store or display this data. 
        We call this complete process network from source to sink a positioning model.
        </aside>
    </section>
    <section data-markdown data-auto-animate data-timing="35">
        <h2 data-id="title-processnetworkdesign">Process Network Design ...</h2>
        <img height="70%" style="margin-top: 1em" data-id="architecture-graph" src="../ipin2021/images/architecture3.svg"/>
        <aside class="notes">
        On top of this, every node in our process network has access to a range of 'Services' that either manage the persistent storage of data that is being handled or
        handle background processing of information that is already pushed through the network. Each service can be added to multiple positioning models, allowing data
        exchange between the calibration part of a process network and the actual online stage used on a production ready system.
        </aside>
    </section>
    <section data-markdown data-auto-animate data-timing="40">
        <h2 data-id="title-modularity">Modularity</h2>
        <img width="100%" style="margin-top: 2em" src="../ipin2021/images/stack.svg"/>
        <aside class="notes">
        By creating this process network design with shared services we allow for a very modular ecosystem where individual nodes or services
        can be reused throughout multiple different packages. Our core component offers the main concepts
        needed to design a process network for processing sensor data to an output position while other components
        handle the communication, data storage or add additional algorithms.
        </aside>
    </section>
</section>

<section>
    <section data-markdown data-auto-animate data-timing="20">
        {% markdown %}
            ## Current State
            **Communication**\
            Socket, MQTT, REST API

            **Data Storage**\
            MongoDB, LocalStorage, RDF

            **Positioning Algorithms**\
            IMU, fingerprinting, RF, OpenVSLAM

            **Abstractions**\
            Geospatial, location-based services

            **Mobile (sensor source)**\
            React-Native, NativeScript
        {% endmarkdown %}
    </section>
</section>

<section>
    <section data-markdown data-auto-animate data-timing="30">
        {% markdown %}
            ## Data Processing
        {% endmarkdown %}
        <img height="80%" src="../ipin2021/images/datatypes.svg" class="logo">
        <aside class="notes">
        The data that we process in our process network is an important aspect of the core of OpenHPS.
        We have knowledge, raw data and processed data. Knowledge is everything that we know - such as sensors, radio transmitters
        or building layouts. Raw data is unprocessed data that we want to process, such as individual video or image frames, unfiltered
        accelerometer data. And finally, we have the processed data that will eventually become knowledge.
        </aside>
    </section>
    <section data-markdown data-auto-animate data-timing="40">
        {% markdown %}
            ## DataObject
            
        {% endmarkdown %}
        <div class="row">
            <div class="col-5">
                <img width="100%" style="margin-top: 1em" src="images/dataobject.svg">
            </div>
            <div class="col-7">
            {% markdown %}
                ```ts
                // Data object for the person we are tracking
                const me = new DataObject("mvdewync@vub.be");
                me.displayName = "Maxim Van de Wynckel";

                // Phone belonging to the person
                const phone = new DataObject()
                phone.displayName = "Maxim's Phone";
                phone.setParent(me);

                // Watch belonging to the person
                const watch = new DataObject();
                watch.displayName = "Maxim's Android Watch";
                watch.setParent(me);

                // Camera of the phone
                const camera = new CameraObject("80:bb:7c:37:0e:02");
                camera.width = 1980;
                camera.height = 1024;
                camera.fps = 30;
                camera.setParent(phone);
                ```
            {% endmarkdown %}
            </div>
        </div>
    </section>
    <section data-markdown data-auto-animate data-timing="30">
        {% markdown %}
            ## Absolute and Relative Positions
        {% endmarkdown %}
        <div class="row">
            <div class="col-5">
                {% markdown %}
                    **Absolute**
                    - 2D, 3D, Geographical, ...

                    **Relative**
                    - Distance, angle, velocity, ...
                    - Relative to another *object*
                {% endmarkdown %}
            </div>
            <div class="col-7">
            {% markdown %}
                ```ts
                // Absolute geographical position
                phone.setPosition(new GeographicalPosition(
                    50.8204, 4.3921
                ));

                // Relative position(s) to another object
                phone.addRelativePosition(new RelativeDistance(
                    "9F:F1:90:4C:F5:6A", 5.2, LengthUnit.METER
                ));
                phone.addRelativePosition(new RelativeDistance(
                    "DC:0F:14:B2:6B:80", 1.4, LengthUnit.METER
                ));
                ```
            {% endmarkdown %}
            </div>
        </div>
    </section>
    <section data-markdown data-auto-animate>
        {% markdown %}
            ## ReferenceSpace
            *An absolute position can be relative to a reference space.*
        {% endmarkdown %}
        <div class="row">
            <div class="col-5">
                <img width="100%" src="images/referencespace.svg"/>
            </div>
            <div class="col-7">
                <img height="70%" src="../ipin2021/images/geojson.svg"/>
            </div>
        </div>
        <aside class="notes">
        Reference spaces are data objects that represent a transformation of a position. When setting the position or orientation of an object
        you can optionally specify the reference space.

        Similar to data objects, reference spaces can have a hierarchical relation with other objects.
        </aside>
    </section>
    <section data-markdown data-auto-animate data-visibility="uncounted" data-timing="0">
        {% markdown %}
            ## SymbolicSpace
        {% endmarkdown %}
        <div class="row">
            <div class="col-5">
                <img width="100%" style="margin-top: 1em" src="../ipin2021/images/symbolicspace.svg"/>
            </div>
            <div class="col-7">
            {% markdown %}
                ```ts
                const building = new Building("PL9")
                    .setBounds({
                        topLeft: new GeographicalPosition(
                                50.8203, 
                                4.3922),
                        width: 46.275, 
                        height: 37.27, 
                        rotation: -34.04
                    });
                
                const floor = new Floor("PL9.3")
                    .setBuilding(building)
                    .setFloorNumber(3);
                
                const office = new Room("PL9.3.58")
                    .setFloor(floor)
                    .setBounds([
                        new Absolute2DPosition(4.75, 31.25),
                        new Absolute2DPosition(8.35, 37.02),
                    ]);
                ```
            {% endmarkdown %}
            </div>
        </div>
        <aside class="notes">
        [OPTIONAL SLIDE] 
        </aside>
    </section>
    <section data-markdown data-auto-animate data-timing="80">
        <h2 data-id="title-dataframe">DataFrame</h2>
        <div class="row">
            <div class="col-5">
                <img width="100%" src="../ipin2021/images/dataframe_single.svg"/>
            </div>
            <div class="col-7">
            {% markdown %}
                ```ts
                // Sensor that captured the frame
                const camera = new CameraObject();

                // Create a new frame
                const frame = new VideoFrame();
                frame.source = camera;
                frame.image = myImage;

                // Add detected objects to frame
                frame.addObject(/* ... */);
                frame.addObject(/* ... */);
                frame.addObject(/* ... */);
                ```
            {% endmarkdown %}
            </div>
        </div>
    </section>
    <section data-markdown data-auto-animate data-timing="0">
        <h2 data-id="title-dataframe">DataFrame ...</h2>
        {% markdown %}
            ### Pushing Data

        {% endmarkdown %}
        <img width="100%" src="../ipin2021/images/nodes-push.svg"/>
    </section>
    <section data-markdown data-auto-animate data-timing="0">
        <h2 data-id="title-dataframe">DataFrame ...</h2>
        {% markdown %}
            ### Pulling Data

        {% endmarkdown %}
        <img width="100%" src="../ipin2021/images/nodes-pull.svg"/>
    </section>
</section>

<section>
    <section data-markdown data-auto-animate data-timing="30">
        {% markdown %}
            ## Positioning Model
            ```ts
            ModelBuilder.create()
                .addService(/* ... */)
                .addShape(GraphBuilder.create()
                    .from(/* Source node(s) */)
                    .via(/* Processing node(s) */)
                    .via(/* Processing node(s) */)
                    .to(/* Sink node(s) */)
                )
                .addShape(/* Other graph shape */)
                .build().then(model => {
                    console.log("Model is ready!");
                }).catch(reject);
            ```
        {% endmarkdown %}
    </section>
</section>

<section>
    <section data-markdown data-auto-animate data-timing="20">
        {% markdown %}
            ## Contributing
            - Positioning algorithms
            - Process network communication
            - Bindings to other systems
            - (UI) abstractions
            - Documentation and examples
        {% endmarkdown %}
    </section>
</section>

<section>
    <section data-markdown data-auto-animate data-timing="20">
        {% markdown %}
            ## Example
            *You want to develop a cheap method of tracking small boxes in a lab.*
            ![](images/20220106_154330.jpg)
        {% endmarkdown %}
    </section>
    <section data-markdown data-auto-animate data-timing="20">
        {% markdown %}
            ## Example
            *You want to develop a cheap method of tracking small boxes in a lab.*\
            \
            **Design considerations**
            - Boxes can be relatively small
            - Hardware should not be expensive
            - Position in a lab should be relatively accurate
            - Infrastructure in the lab can change
        {% endmarkdown %}
    </section>
</section>

<section>
    <section data-markdown data-auto-animate data-timing="20">
        {% markdown %}
            ## Example: Implementation
            - Transmitting Bluetooth beacons in each box
            - Bluetooth receivers around the room with WiFi connectivity (ESP32)
            - Central server (Raspberry Pi) for keeping track of the boxes
            - API endpoint in Raspberry Pi
        {% endmarkdown %}
    </section>
    <section data-markdown data-auto-animate data-timing="20">
        {% markdown %}
            ## Example: Implementation
            ### Receivers and Transmitters
            - ESP32 with Espruino firmware as plugged-in receivers
			- iTAG Bluetooth key trackers as tracked devices
        {% endmarkdown %}
        <img height="50%" src="images/20220106_165351.png">
    </section>
    <section data-markdown data-auto-animate data-timing="20">
        {% markdown %}
            ## Example: Implementationd
            ### Positioning model

        {% endmarkdown %}
    </section>
</section>

<section data-markdown data-auto-animate data-timing="30">
    <style>
    .resource-img {
        height: 50px;
        margin-left: none !important;
        display: inline-block !important;
        margin-top: 0 !important;
        margin-bottom: 0 !important;
    }
    .resource-link {
        margin-left: 1em;
    }
    </style>
    {% markdown %}
        ## Resources and Links
        <img class="resource-img" src="images/globe-solid.svg"><a class="resource-link" href="https://openhps.org">https://openhps.org</a>

        <img class="resource-img" src="images/github-brands.svg"><a class="resource-link" href="https://github.com/OpenHPS">https://github.com/OpenHPS</a>

        <img class="resource-img" src="images/file-pdf-solid.svg"><a class="resource-link" href="https://openhps.org/posts/2021/01/14/">Technical Paper</a>

    {% endmarkdown %}
</section>